from enum import Enum


class BlockType(Enum):
    PARAGRAPH = "paragraph"
    HEADING = "heading"
    CODE = "code"
    QUOTE = "quote"
    UNORDERED_LIST = "unordered_list"
    ORDERED_LIST = "ordered_list"

def markdown_to_block(markdown):
    # Split the markdown string into lines
    lines = markdown.split('\n')
    
    # Initialize an empty list to store the block lines
    block_lines = []
    
    # Iterate over each line in the markdown string
    for line in lines:
        # If the line is not empty, add it to the block lines
        if line.strip():
            block_lines.append(line)
    
    # Join the block lines with newlines and return the result
    return '\n'.join(block_lines)

def block_to_block_type(block):
    lines = block.split('\n')
    # Check if the block is empty
    if not block.strip():
        return BlockType.PARAGRAPH
    
    # Check if the block is a heading
    if block.startswith(("# ", "## ", "### ", "#### ", "##### ", "###### ")):
        return BlockType.HEADING
    
    # Check if the block is a code block
    if block.startswith('```') and block.endswith('```'):
        return BlockType.CODE
    
    # Check if the block is a quote
    if block.startswith('>'):
        for line in lines:
            if not line.startswith('>'):
                return BlockType.PARAGRAPH
        return BlockType.QUOTE
    
    # Check if the block is an unordered list
    if block.startswith('- '):
        for line in lines:
            if not line.startswith('- '):
                return BlockType.PARAGRAPH
        return BlockType.UNORDERED_LIST
    
    # Check if the block is an ordered list
    if block.startswith("1. "):
        i = 1
        for line in lines:
            if not line.startswith(f"{i}. "):
                return BlockType.PARAGRAPH
            i += 1
        return BlockType.ORDERED_LIST
    
    # If none of the above, return paragraph type
    return BlockType.PARAGRAPH